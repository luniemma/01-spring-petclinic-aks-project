trigger:
  - master

pr:
  - master

variables:
  - group: sonarcloud-variables
  - group: acr-variables
  - name: imagePullSecret
    value: 'acr-auth'

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  displayName: 'Checkout code'

# Now cache the .m2/repository folder before running Maven build
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
      maven
    path: $(Pipeline.Workspace)/.m2/repository
  displayName: 'Restore Cache for Maven packages'

# Ensure the .m2/repository directory exists
- script: mkdir -p $(Pipeline.Workspace)/.m2/repository
  displayName: 'Ensure .m2/repository exists'

# First, run Maven to populate the .m2/repository before caching
- task: Maven@4
  inputs:
    mavenPOMFile: 'pom.xml'
    goals: 'clean install'
    options: '-B -Dtest=!PostgresIntegrationTests'
  displayName: 'Build and test with Maven'

# Re-cache Maven dependencies after the build
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    path: $(Pipeline.Workspace)/.m2/repository
  displayName: 'Cache Maven packages'

# SonarCloud analysis
- task: Maven@4
  inputs:
    mavenPOMFile: 'pom.xml'
    goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar'
    options: '-Dsonar.projectKey=$(SONAR_PROJECT_KEY) -Dsonar.organization=$(SONAR_ORG) -Dsonar.host.url=https://sonarcloud.io'
  env:
    SONAR_TOKEN: $(SONAR_TOKEN)
  displayName: 'SonarCloud Scan'

# Docker image build and push to Azure Container Registry
- task: Docker@2
  inputs:
    containerRegistry: 'acr-service-connection'
    repository: 'spring-petclinic'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(Build.BuildId)
      latest
  displayName: 'Build and push Docker image to ACR'

# Run Trivy vulnerability scanner on the image in ACR
- task: AzureCLI@2
  inputs:
    azureSubscription: 'az-service-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az acr login --name $(ACR_NAME)
      docker pull $(ACR_NAME).azurecr.io/spring-petclinic:$(Build.BuildId)
      
      TRIVY_VERSION=$(curl -s "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | jq -r .tag_name)
      wget https://github.com/aquasecurity/trivy/releases/download/$TRIVY_VERSION/trivy_${TRIVY_VERSION}_Linux-64bit.deb
      sudo dpkg -i trivy_${TRIVY_VERSION}_Linux-64bit.deb
      
      trivy image --format json --output trivy-results.json $(ACR_NAME).azurecr.io/spring-petclinic:$(Build.BuildId)
      
      if jq -e '.Results[] | select(.Vulnerabilities[] | select(.Severity == "CRITICAL"))' trivy-results.json > /dev/null; then
        echo "Critical vulnerabilities found. Please review the scan results."
        exit 1
      else
        echo "No critical vulnerabilities found."
      fi
  displayName: 'Run Trivy vulnerability scanner on ACR image'

# Publish test reports only if the build or tests fail
- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/target/surefire-reports'
    artifactName: 'surefire-reports'
  displayName: 'Upload test reports'

